apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name:  {{ include "jaeger.collector.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  replicas: {{ .Values.collector.replicaCount }}
  {{- if .Values.collector.updateStrategy }}
  strategy: {{- toYaml .Values.collector.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: query
        {{- if .Values.collector.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.collector.podLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if .Values.collector.podAnnotations }}
      annotations:
        {{- if .Values.collector.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.collector.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
    spec:
      {{- if .Values.collector.schedulerName }}
      schedulerName: {{ .Values.collector.schedulerName }}
      {{- end }}
      priorityClassName: {{ .Values.collector.priorityClassName | quote }}
      {{- if .Values.collector.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.collector.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.collector.podAffinityPreset "component" "collector" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.collector.podAntiAffinityPreset "component" "collector" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.collector.nodeAffinityPreset.type "key" .Values.collector.nodeAffinityPreset.key "values" .Values.collector.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.collector.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.collector.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.collector.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.collector.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.collector.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.collector.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.collector.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.collector.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      initContainers:
      - name: jaeger-cassandra-ready-check
        image: {{ .Values.cassandra.image.registry }}/{{ .Values.cassandra.image.repository }}:{{ .Values.cassandra.image.tag }}
        command:
          - /bin/bash
        args:
          - -ec
          - |
            #!/bin/bash

            set -o errexit
            set -o nounset
            set -o pipefail

            . /opt/bitnami/scripts/libos.sh

            check_cassandra_connection() {
                echo "SELECT 1" | cqlsh -u $CASSANDRA_USERNAME -p $CASSANDRA_PASSWORD -e "QUIT"
            }

            info "Connecting to the Cassandra instance $CQLSH_HOST:$CQLSH_PORT"
            info "Take it easy. Could be authentication errors since the cassandra pod startup until the password is set"
            if ! retry_while "check_cassandra_connection"; then
            error "Could not connect to the database server"
            exit 1
            else
            info "Connection check success"
            fi
        env:
        - name: CQLSH
          value: /opt/bitnami/cassandra/bin/cqlsh
        - name: CQLSH_HOST
          value: {{ printf "%s-cassandra" (include "common.names.fullname" .) }}
        - name: CQLSH_PORT
          value: {{ .Values.cassandra.containerPorts.cql | quote }}
        - name: CASSANDRA_USERNAME
          value: {{ .Values.cassandra.dbUser.user }}
        - name: CASSANDRA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ printf "%s-cassandra" (include "common.names.fullname" .) }}
              key: cassandra-password
      {{- if .Values.collector.initContainers }}
      {{- include "common.tplvalues.render" (dict "value" .Values.collector.initContainers "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: jaeger-collector
          image: {{ include "jaeger.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.collector.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.collector.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.collector.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.collector.command "context" $) | nindent 12 }}
          {{- else }}
          command: ["/opt/bitnami/jaeger/bin/jaeger-collector"]
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.collector.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.collector.args "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.collector.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.collector.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          ports:
            - name: ui
              containerPort: {{ .Values.collector.service.ports.api }}
            - name: admin
              containerPort: {{ .Values.collector.service.ports.admin }}
          env:
            - name: CASSANDRA_SERVERS
              value: {{ printf "%s-cassandra" (include "common.names.fullname" .) }}
            - name: CASSANDRA_PORT
              value: {{ .Values.cassandra.containerPorts.cql | quote }}
            - name: CASSANDRA_USERNAME
              value: {{ .Values.cassandra.dbUser.user }}
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-cassandra" (include "common.names.fullname" .) }}
                  key: cassandra-password
            - name: CASSANDRA_KEYSPACE
              value: "jaeger_v1_dc1"
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" .Values.image.debug | quote }}
            {{- if .Values.collector.extraEnvVars }}
              {{- include "common.tplvalues.render" (dict "value" .Values.collector.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.collector.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.collector.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.collector.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.collector.extraEnvVarsSecret }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.collector.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.collector.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.collector.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.collector.startupProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: admin
          {{- end }}
          {{- end }}
          {{- if .Values.query.resources }}
          resources: {{- toYaml .Values.collector.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.collector.extraVolumeMounts }}
            {{- include "common.tplvalues.render" ( dict "value" .Values.collector.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.collector.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.collector.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        {{- if .Values.collector.extraVolumes }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.collector.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
